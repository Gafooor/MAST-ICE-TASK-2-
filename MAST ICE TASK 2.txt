import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

// Home Screen - Introduces the game and allows starting
const HomeScreen = ({ navigation }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome, Arithmetica!</Text>
      <Text>Your quest to master magical arithmetic begins now.</Text>
      <Button
        title="Start Training"
        onPress={() => navigation.navigate('DifficultySelection')}
      />
    </View>
  );
};

// Difficulty Selection Screen
const DifficultySelectionScreen = ({ navigation }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Select Your Difficulty Level</Text>
      <Button
        title="Apprentice"
        onPress={() => navigation.navigate('GameScreen', { difficulty: 'Apprentice' })}
      />
      <Button
        title="Wizard"
        onPress={() => navigation.navigate('GameScreen', { difficulty: 'Wizard' })}
      />
      <Button
        title="Sorcerer"
        onPress={() => navigation.navigate('GameScreen', { difficulty: 'Sorcerer' })}
      />
    </View>
  );
};

// Game Screen - Displays the math challenges based on difficulty
const GameScreen = ({ route, navigation }) => {
  const { difficulty } = route.params;
  const [timeRemaining, setTimeRemaining] = useState(30); // Example time limit
  const [equation, setEquation] = useState(generateEquation(difficulty));
  const [score, setScore] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeRemaining((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          Alert.alert('Time\'s up!', 'You didn\'t complete the challenge in time!');
          navigation.navigate('ResultsScreen', { score });
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  const handleAnswer = (isCorrect) => {
    if (isCorrect) {
      Alert.alert('Correct!', 'You solved the equation!');
      setScore(score + 10); // Increment score
      setEquation(generateEquation(difficulty)); // Generate a new equation
    } else {
      Alert.alert('Incorrect!', 'Try again.');
    }
  };

  return (
    <View style={styles.container}>
      <Text>Time Remaining: {timeRemaining}s</Text>
      <Text style={styles.equation}>{equation.question}</Text>

      {equation.options.map((option, index) => (
        <Button
          key={index}
          title={`${option}`}
          onPress={() => handleAnswer(option === equation.answer)}
        />
      ))}

      <Text>Score: {score}</Text>
    </View>
  );
};

// Result Screen - Displays final score and feedback
const ResultsScreen = ({ route, navigation }) => {
  const { score } = route.params;
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Challenge Completed!</Text>
      <Text>Your final score is: {score}</Text>
      <Button title="Continue Training" onPress={() => navigation.navigate('Home')} />
    </View>
  );
};

// Helper Function to Generate Math Equations Based on Difficulty
const generateEquation = (difficulty) => {
  let question, answer, options;

  if (difficulty === 'Apprentice') {
    const num1 = Math.floor(Math.random() * 10) + 1;
    const num2 = Math.floor(Math.random() * 10) + 1;
    question = `${num1} + ${num2} = ?`;
    answer = num1 + num2;
  } else if (difficulty === 'Wizard') {
    const num1 = Math.floor(Math.random() * 10) + 1;
    const num2 = Math.floor(Math.random() * 10) + 1;
    question = `${num1} * ${num2} = ?`;
    answer = num1 * num2;
  } else {
    const num1 = Math.floor(Math.random() * 20) + 1;
    const num2 = Math.floor(Math.random() * 10) + 1;
    question = `${num1} / ${num2} = ?`;
    answer = Math.floor(num1 / num2); // Integer division for simplicity
  }

  options = [answer, answer + 1, answer - 1, answer + 2].sort(() => Math.random() - 0.5);
  return { question, answer, options };
};

// App Structure with Navigation
export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="DifficultySelection" component={DifficultySelectionScreen} />
        <Stack.Screen name="GameScreen" component={GameScreen} />
        <Stack.Screen name="ResultsScreen" component={ResultsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  equation: {
    fontSize: 20,
    marginVertical: 20,
  },
});